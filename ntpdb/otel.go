// Code generated by gowrap. DO NOT EDIT.
// template: opentelemetry.gowrap
// gowrap: http://github.com/hexdigest/gowrap

package ntpdb

import (
	"context"
	"database/sql"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	_codes "go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

// QuerierTxWithTracing implements QuerierTx interface instrumented with open telemetry spans
type QuerierTxWithTracing struct {
	QuerierTx
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewQuerierTxWithTracing returns QuerierTxWithTracing
func NewQuerierTxWithTracing(base QuerierTx, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) QuerierTxWithTracing {
	d := QuerierTxWithTracing{
		QuerierTx: base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Begin implements QuerierTx
func (_d QuerierTxWithTracing) Begin(ctx context.Context) (q1 QuerierTx, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.Begin")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"q1":  q1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.Begin(ctx)
}

// ClearServerScoreConstraintViolation implements QuerierTx
func (_d QuerierTxWithTracing) ClearServerScoreConstraintViolation(ctx context.Context, arg ClearServerScoreConstraintViolationParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.ClearServerScoreConstraintViolation")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.ClearServerScoreConstraintViolation(ctx, arg)
}

// Commit implements QuerierTx
func (_d QuerierTxWithTracing) Commit(ctx context.Context) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.Commit")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.Commit(ctx)
}

// DeleteServerScore implements QuerierTx
func (_d QuerierTxWithTracing) DeleteServerScore(ctx context.Context, arg DeleteServerScoreParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.DeleteServerScore")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.DeleteServerScore(ctx, arg)
}

// GetMinLogScoreID implements QuerierTx
func (_d QuerierTxWithTracing) GetMinLogScoreID(ctx context.Context) (u1 uint64, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetMinLogScoreID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetMinLogScoreID(ctx)
}

// GetMonitorPriority implements QuerierTx
func (_d QuerierTxWithTracing) GetMonitorPriority(ctx context.Context, serverID uint32) (ga1 []GetMonitorPriorityRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetMonitorPriority")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":      ctx,
				"serverID": serverID}, map[string]interface{}{
				"ga1": ga1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetMonitorPriority(ctx, serverID)
}

// GetMonitorTLSNameIP implements QuerierTx
func (_d QuerierTxWithTracing) GetMonitorTLSNameIP(ctx context.Context, arg GetMonitorTLSNameIPParams) (g1 GetMonitorTLSNameIPRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetMonitorTLSNameIP")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"g1":  g1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetMonitorTLSNameIP(ctx, arg)
}

// GetMonitorsTLSName implements QuerierTx
func (_d QuerierTxWithTracing) GetMonitorsTLSName(ctx context.Context, tlsName sql.NullString) (ma1 []Monitor, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetMonitorsTLSName")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":     ctx,
				"tlsName": tlsName}, map[string]interface{}{
				"ma1": ma1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetMonitorsTLSName(ctx, tlsName)
}

// GetScorerLogScores implements QuerierTx
func (_d QuerierTxWithTracing) GetScorerLogScores(ctx context.Context, arg GetScorerLogScoresParams) (la1 []LogScore, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetScorerLogScores")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"la1": la1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetScorerLogScores(ctx, arg)
}

// GetScorerNextLogScoreID implements QuerierTx
func (_d QuerierTxWithTracing) GetScorerNextLogScoreID(ctx context.Context, logScoreID uint64) (u1 uint64, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetScorerNextLogScoreID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":        ctx,
				"logScoreID": logScoreID}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetScorerNextLogScoreID(ctx, logScoreID)
}

// GetScorerRecentScores implements QuerierTx
func (_d QuerierTxWithTracing) GetScorerRecentScores(ctx context.Context, arg GetScorerRecentScoresParams) (la1 []LogScore, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetScorerRecentScores")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"la1": la1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetScorerRecentScores(ctx, arg)
}

// GetScorerStatus implements QuerierTx
func (_d QuerierTxWithTracing) GetScorerStatus(ctx context.Context) (ga1 []GetScorerStatusRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetScorerStatus")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"ga1": ga1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetScorerStatus(ctx)
}

// GetScorers implements QuerierTx
func (_d QuerierTxWithTracing) GetScorers(ctx context.Context) (ga1 []GetScorersRow, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetScorers")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"ga1": ga1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetScorers(ctx)
}

// GetServer implements QuerierTx
func (_d QuerierTxWithTracing) GetServer(ctx context.Context, id uint32) (s1 Server, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetServer")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"id":  id}, map[string]interface{}{
				"s1":  s1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetServer(ctx, id)
}

// GetServerIP implements QuerierTx
func (_d QuerierTxWithTracing) GetServerIP(ctx context.Context, ip string) (s1 Server, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetServerIP")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"ip":  ip}, map[string]interface{}{
				"s1":  s1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetServerIP(ctx, ip)
}

// GetServerScore implements QuerierTx
func (_d QuerierTxWithTracing) GetServerScore(ctx context.Context, arg GetServerScoreParams) (s1 ServerScore, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetServerScore")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"s1":  s1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetServerScore(ctx, arg)
}

// GetServers implements QuerierTx
func (_d QuerierTxWithTracing) GetServers(ctx context.Context, arg GetServersParams) (sa1 []Server, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetServers")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"sa1": sa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetServers(ctx, arg)
}

// GetServersMonitorReview implements QuerierTx
func (_d QuerierTxWithTracing) GetServersMonitorReview(ctx context.Context) (ua1 []uint32, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetServersMonitorReview")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"ua1": ua1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetServersMonitorReview(ctx)
}

// GetSystemSetting implements QuerierTx
func (_d QuerierTxWithTracing) GetSystemSetting(ctx context.Context, key string) (s1 string, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.GetSystemSetting")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"key": key}, map[string]interface{}{
				"s1":  s1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.GetSystemSetting(ctx, key)
}

// InsertLogScore implements QuerierTx
func (_d QuerierTxWithTracing) InsertLogScore(ctx context.Context, arg InsertLogScoreParams) (r1 sql.Result, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.InsertLogScore")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"r1":  r1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.InsertLogScore(ctx, arg)
}

// InsertScorer implements QuerierTx
func (_d QuerierTxWithTracing) InsertScorer(ctx context.Context, arg InsertScorerParams) (r1 sql.Result, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.InsertScorer")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"r1":  r1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.InsertScorer(ctx, arg)
}

// InsertScorerStatus implements QuerierTx
func (_d QuerierTxWithTracing) InsertScorerStatus(ctx context.Context, arg InsertScorerStatusParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.InsertScorerStatus")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.InsertScorerStatus(ctx, arg)
}

// InsertServerScore implements QuerierTx
func (_d QuerierTxWithTracing) InsertServerScore(ctx context.Context, arg InsertServerScoreParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.InsertServerScore")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.InsertServerScore(ctx, arg)
}

// Rollback implements QuerierTx
func (_d QuerierTxWithTracing) Rollback(ctx context.Context) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.Rollback")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.Rollback(ctx)
}

// UpdateMonitorSeen implements QuerierTx
func (_d QuerierTxWithTracing) UpdateMonitorSeen(ctx context.Context, arg UpdateMonitorSeenParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateMonitorSeen")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateMonitorSeen(ctx, arg)
}

// UpdateMonitorSubmit implements QuerierTx
func (_d QuerierTxWithTracing) UpdateMonitorSubmit(ctx context.Context, arg UpdateMonitorSubmitParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateMonitorSubmit")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateMonitorSubmit(ctx, arg)
}

// UpdateMonitorVersion implements QuerierTx
func (_d QuerierTxWithTracing) UpdateMonitorVersion(ctx context.Context, arg UpdateMonitorVersionParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateMonitorVersion")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateMonitorVersion(ctx, arg)
}

// UpdateScorerStatus implements QuerierTx
func (_d QuerierTxWithTracing) UpdateScorerStatus(ctx context.Context, arg UpdateScorerStatusParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateScorerStatus")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateScorerStatus(ctx, arg)
}

// UpdateServer implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServer(ctx context.Context, arg UpdateServerParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServer")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServer(ctx, arg)
}

// UpdateServerScore implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerScore(ctx context.Context, arg UpdateServerScoreParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerScore")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerScore(ctx, arg)
}

// UpdateServerScoreConstraintViolation implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerScoreConstraintViolation(ctx context.Context, arg UpdateServerScoreConstraintViolationParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerScoreConstraintViolation")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerScoreConstraintViolation(ctx, arg)
}

// UpdateServerScoreLastConstraintCheck implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerScoreLastConstraintCheck(ctx context.Context, arg UpdateServerScoreLastConstraintCheckParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerScoreLastConstraintCheck")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerScoreLastConstraintCheck(ctx, arg)
}

// UpdateServerScorePauseReason implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerScorePauseReason(ctx context.Context, arg UpdateServerScorePauseReasonParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerScorePauseReason")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerScorePauseReason(ctx, arg)
}

// UpdateServerScoreQueue implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerScoreQueue(ctx context.Context, arg UpdateServerScoreQueueParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerScoreQueue")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerScoreQueue(ctx, arg)
}

// UpdateServerScoreStatus implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerScoreStatus(ctx context.Context, arg UpdateServerScoreStatusParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerScoreStatus")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerScoreStatus(ctx, arg)
}

// UpdateServerScoreStratum implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerScoreStratum(ctx context.Context, arg UpdateServerScoreStratumParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerScoreStratum")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerScoreStratum(ctx, arg)
}

// UpdateServerStratum implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServerStratum(ctx context.Context, arg UpdateServerStratumParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServerStratum")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServerStratum(ctx, arg)
}

// UpdateServersMonitorReview implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServersMonitorReview(ctx context.Context, arg UpdateServersMonitorReviewParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServersMonitorReview")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServersMonitorReview(ctx, arg)
}

// UpdateServersMonitorReviewChanged implements QuerierTx
func (_d QuerierTxWithTracing) UpdateServersMonitorReviewChanged(ctx context.Context, arg UpdateServersMonitorReviewChangedParams) (err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "QuerierTx.UpdateServersMonitorReviewChanged")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"arg": arg}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetStatus(_codes.Error, err.Error())
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.QuerierTx.UpdateServersMonitorReviewChanged(ctx, arg)
}
